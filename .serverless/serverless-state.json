{
  "service": {
    "service": "ordeneya",
    "serviceObject": {
      "name": "ordeneya"
    },
    "provider": {
      "name": "aws",
      "runtime": "nodejs12.x",
      "region": "us-east-1",
      "lambdaHashingVersion": "20201221",
      "environment": {
        "REGION": "us-east-1",
        "PENDING_ORDER_QUEUE": {
          "Ref": "PendingOrdersQueue"
        },
        "PENDING_ORDER_QUEUE_NAME": "PendingOrdersQueue",
        "ORDER_TABLE": "OrdersTable"
      },
      "iamRoleStatements": [
        {
          "Effect": "Allow",
          "Action": [
            "sqs:SendMessage"
          ],
          "Resource": "arn:aws:sqs:us-east-1:*:PendingOrdersQueue"
        },
        {
          "Effect": "Allow",
          "Action": [
            "dynamodb:GetItem",
            "dynamodb:PutItem",
            "dynamodb:UpdateItem",
            "dynamodb:DeleteItem"
          ],
          "Resource": "arn:aws:dynamodb:us-east-1:*:table/OrdersTable"
        }
      ],
      "stage": "dev",
      "variableSyntax": "\\${([^{}:]+?(?:\\(|:)(?:[^:{}][^{}]*?)?)}",
      "versionFunctions": true,
      "compiledCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "ServerlessDeploymentBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
              "BucketEncryption": {
                "ServerSideEncryptionConfiguration": [
                  {
                    "ServerSideEncryptionByDefault": {
                      "SSEAlgorithm": "AES256"
                    }
                  }
                ]
              }
            }
          },
          "ServerlessDeploymentBucketPolicy": {
            "Type": "AWS::S3::BucketPolicy",
            "Properties": {
              "Bucket": {
                "Ref": "ServerlessDeploymentBucket"
              },
              "PolicyDocument": {
                "Statement": [
                  {
                    "Action": "s3:*",
                    "Effect": "Deny",
                    "Principal": "*",
                    "Resource": [
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            },
                            "/*"
                          ]
                        ]
                      },
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            }
                          ]
                        ]
                      }
                    ],
                    "Condition": {
                      "Bool": {
                        "aws:SecureTransport": false
                      }
                    }
                  }
                ]
              }
            }
          },
          "CreateOrderServiceLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/ordeneya-dev-createOrderService"
            }
          },
          "GetOrderServiceLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/ordeneya-dev-getOrderService"
            }
          },
          "PrepareOrderServiceLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/ordeneya-dev-prepareOrderService"
            }
          },
          "SendOrderServiceLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/ordeneya-dev-sendOrderService"
            }
          },
          "IamRoleLambdaExecution": {
            "Type": "AWS::IAM::Role",
            "Properties": {
              "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "Service": [
                        "lambda.amazonaws.com"
                      ]
                    },
                    "Action": [
                      "sts:AssumeRole"
                    ]
                  }
                ]
              },
              "Policies": [
                {
                  "PolicyName": {
                    "Fn::Join": [
                      "-",
                      [
                        "ordeneya",
                        "dev",
                        "lambda"
                      ]
                    ]
                  },
                  "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:CreateLogStream",
                          "logs:CreateLogGroup"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/ordeneya-dev*:*"
                          }
                        ]
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:PutLogEvents"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/ordeneya-dev*:*:*"
                          }
                        ]
                      },
                      {
                        "$ref": "$[\"service\"][\"provider\"][\"iamRoleStatements\"][0]"
                      },
                      {
                        "$ref": "$[\"service\"][\"provider\"][\"iamRoleStatements\"][1]"
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "dynamodb:GetRecords",
                          "dynamodb:GetShardIterator",
                          "dynamodb:DescribeStream",
                          "dynamodb:ListStreams"
                        ],
                        "Resource": [
                          {
                            "Fn::GetAtt": [
                              "OrdersTable",
                              "StreamArn"
                            ]
                          }
                        ]
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "sqs:ReceiveMessage",
                          "sqs:DeleteMessage",
                          "sqs:GetQueueAttributes"
                        ],
                        "Resource": [
                          {
                            "Fn::GetAtt": [
                              "PendingOrdersQueue",
                              "Arn"
                            ]
                          }
                        ]
                      }
                    ]
                  }
                }
              ],
              "Path": "/",
              "RoleName": {
                "Fn::Join": [
                  "-",
                  [
                    "ordeneya",
                    "dev",
                    {
                      "Ref": "AWS::Region"
                    },
                    "lambdaRole"
                  ]
                ]
              }
            }
          },
          "CreateOrderServiceLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/ordeneya/dev/1617583547029-2021-04-05T00:45:47.029Z/ordeneya.zip"
              },
              "Handler": "handler.createOrder",
              "Runtime": "nodejs12.x",
              "FunctionName": "ordeneya-dev-createOrderService",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "REGION": "us-east-1",
                  "PENDING_ORDER_QUEUE": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"PENDING_ORDER_QUEUE\"]"
                  },
                  "PENDING_ORDER_QUEUE_NAME": "PendingOrdersQueue",
                  "ORDER_TABLE": "OrdersTable"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "CreateOrderServiceLogGroup"
            ]
          },
          "GetOrderServiceLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/ordeneya/dev/1617583547029-2021-04-05T00:45:47.029Z/ordeneya.zip"
              },
              "Handler": "handler.getOrder",
              "Runtime": "nodejs12.x",
              "FunctionName": "ordeneya-dev-getOrderService",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "REGION": "us-east-1",
                  "PENDING_ORDER_QUEUE": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"PENDING_ORDER_QUEUE\"]"
                  },
                  "PENDING_ORDER_QUEUE_NAME": "PendingOrdersQueue",
                  "ORDER_TABLE": "OrdersTable"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetOrderServiceLogGroup"
            ]
          },
          "PrepareOrderServiceLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/ordeneya/dev/1617583547029-2021-04-05T00:45:47.029Z/ordeneya.zip"
              },
              "Handler": "handler.prepareOrder",
              "Runtime": "nodejs12.x",
              "FunctionName": "ordeneya-dev-prepareOrderService",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "REGION": "us-east-1",
                  "PENDING_ORDER_QUEUE": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"PENDING_ORDER_QUEUE\"]"
                  },
                  "PENDING_ORDER_QUEUE_NAME": "PendingOrdersQueue",
                  "ORDER_TABLE": "OrdersTable"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "PrepareOrderServiceLogGroup"
            ]
          },
          "SendOrderServiceLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/ordeneya/dev/1617583547029-2021-04-05T00:45:47.029Z/ordeneya.zip"
              },
              "Handler": "handler.sendOrder",
              "Runtime": "nodejs12.x",
              "FunctionName": "ordeneya-dev-sendOrderService",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "REGION": "us-east-1",
                  "PENDING_ORDER_QUEUE": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"PENDING_ORDER_QUEUE\"]"
                  },
                  "PENDING_ORDER_QUEUE_NAME": "PendingOrdersQueue",
                  "ORDER_TABLE": "OrdersTable"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "SendOrderServiceLogGroup"
            ]
          },
          "CreateOrderServiceLambdaVersionAL930OjoF2QsRIbDtNf3gakUzNeldYQQhi0I8HyesU": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "CreateOrderServiceLambdaFunction"
              },
              "CodeSha256": "m5HrwjCUaKZskJQK8liyPg9wHhs3OXpniiae7K+rLn0="
            }
          },
          "GetOrderServiceLambdaVersionxAUVo5nb2NOEa2p1eL82juXvn8h6NQIDJdoUXlwVRI": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetOrderServiceLambdaFunction"
              },
              "CodeSha256": "m5HrwjCUaKZskJQK8liyPg9wHhs3OXpniiae7K+rLn0="
            }
          },
          "PrepareOrderServiceLambdaVersion9ZPIiupthd4lqO0xJrpysUzweJrIA0JUGqJ2FSIE": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "PrepareOrderServiceLambdaFunction"
              },
              "CodeSha256": "m5HrwjCUaKZskJQK8liyPg9wHhs3OXpniiae7K+rLn0="
            }
          },
          "SendOrderServiceLambdaVersionJwPDFNnhferMYn5glBpyFfz3SSJmEux5Z1mB1uea0": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "SendOrderServiceLambdaFunction"
              },
              "CodeSha256": "m5HrwjCUaKZskJQK8liyPg9wHhs3OXpniiae7K+rLn0="
            }
          },
          "ApiGatewayRestApi": {
            "Type": "AWS::ApiGateway::RestApi",
            "Properties": {
              "Name": "dev-ordeneya",
              "EndpointConfiguration": {
                "Types": [
                  "EDGE"
                ]
              },
              "Policy": ""
            }
          },
          "ApiGatewayResourceOrder": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "order",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceOrderOrderidVar": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceOrder"
              },
              "PathPart": "{orderId}",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodOrderPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceOrder"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "CreateOrderServiceLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            }
          },
          "ApiGatewayMethodOrderOrderidVarGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceOrderOrderidVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "GetOrderServiceLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            }
          },
          "ApiGatewayDeployment1617583542752": {
            "Type": "AWS::ApiGateway::Deployment",
            "Properties": {
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "StageName": "dev"
            },
            "DependsOn": [
              "ApiGatewayMethodOrderPost",
              "ApiGatewayMethodOrderOrderidVarGet"
            ]
          },
          "CreateOrderServiceLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "CreateOrderServiceLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "GetOrderServiceLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetOrderServiceLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "SendOrderServiceEventSourceMappingDynamodbOrdersTable": {
            "Type": "AWS::Lambda::EventSourceMapping",
            "DependsOn": [
              "IamRoleLambdaExecution"
            ],
            "Properties": {
              "BatchSize": 1,
              "EventSourceArn": {
                "Fn::GetAtt": [
                  "OrdersTable",
                  "StreamArn"
                ]
              },
              "FunctionName": {
                "Fn::GetAtt": [
                  "SendOrderServiceLambdaFunction",
                  "Arn"
                ]
              },
              "StartingPosition": "LATEST",
              "Enabled": true
            }
          },
          "PrepareOrderServiceEventSourceMappingSQSPendingOrdersQueue": {
            "Type": "AWS::Lambda::EventSourceMapping",
            "DependsOn": [
              "IamRoleLambdaExecution"
            ],
            "Properties": {
              "BatchSize": 1,
              "EventSourceArn": {
                "Fn::GetAtt": [
                  "PendingOrdersQueue",
                  "Arn"
                ]
              },
              "FunctionName": {
                "Fn::GetAtt": [
                  "PrepareOrderServiceLambdaFunction",
                  "Arn"
                ]
              },
              "Enabled": true
            }
          },
          "PendingOrdersQueue": {
            "Type": "AWS::SQS::Queue",
            "Properties": {
              "QueueName": "PendingOrdersQueue"
            }
          },
          "OrdersTable": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
              "AttributeDefinitions": [
                {
                  "AttributeName": "id",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "id",
                  "KeyType": "HASH"
                }
              ],
              "ProvisionedThroughput": {
                "ReadCapacityUnits": 1,
                "WriteCapacityUnits": 1
              },
              "TableName": "OrdersTable",
              "StreamSpecification": {
                "StreamViewType": "NEW_IMAGE"
              }
            }
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": {
              "Ref": "ServerlessDeploymentBucket"
            }
          },
          "CreateOrderServiceLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "CreateOrderServiceLambdaVersionAL930OjoF2QsRIbDtNf3gakUzNeldYQQhi0I8HyesU"
            }
          },
          "GetOrderServiceLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetOrderServiceLambdaVersionxAUVo5nb2NOEa2p1eL82juXvn8h6NQIDJdoUXlwVRI"
            }
          },
          "PrepareOrderServiceLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "PrepareOrderServiceLambdaVersion9ZPIiupthd4lqO0xJrpysUzweJrIA0JUGqJ2FSIE"
            }
          },
          "SendOrderServiceLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "SendOrderServiceLambdaVersionJwPDFNnhferMYn5glBpyFfz3SSJmEux5Z1mB1uea0"
            }
          },
          "ServiceEndpoint": {
            "Description": "URL of the service endpoint",
            "Value": {
              "Fn::Join": [
                "",
                [
                  "https://",
                  {
                    "Ref": "ApiGatewayRestApi"
                  },
                  ".execute-api.",
                  {
                    "Ref": "AWS::Region"
                  },
                  ".",
                  {
                    "Ref": "AWS::URLSuffix"
                  },
                  "/dev"
                ]
              ]
            }
          }
        }
      },
      "coreCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "ServerlessDeploymentBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
              "BucketEncryption": {
                "ServerSideEncryptionConfiguration": [
                  {
                    "ServerSideEncryptionByDefault": {
                      "SSEAlgorithm": "AES256"
                    }
                  }
                ]
              }
            }
          },
          "ServerlessDeploymentBucketPolicy": {
            "Type": "AWS::S3::BucketPolicy",
            "Properties": {
              "Bucket": {
                "Ref": "ServerlessDeploymentBucket"
              },
              "PolicyDocument": {
                "Statement": [
                  {
                    "Action": "s3:*",
                    "Effect": "Deny",
                    "Principal": "*",
                    "Resource": [
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            },
                            "/*"
                          ]
                        ]
                      },
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            }
                          ]
                        ]
                      }
                    ],
                    "Condition": {
                      "Bool": {
                        "aws:SecureTransport": false
                      }
                    }
                  }
                ]
              }
            }
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": {
              "Ref": "ServerlessDeploymentBucket"
            }
          }
        }
      },
      "vpc": {}
    },
    "pluginsData": {},
    "functions": {
      "createOrderService": {
        "handler": "handler.createOrder",
        "events": [
          {
            "http": {
              "path": "order",
              "method": "post",
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "ordeneya-dev-createOrderService",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs12.x",
        "vpc": {},
        "versionLogicalId": "CreateOrderServiceLambdaVersionAL930OjoF2QsRIbDtNf3gakUzNeldYQQhi0I8HyesU"
      },
      "getOrderService": {
        "handler": "handler.getOrder",
        "events": [
          {
            "http": {
              "path": "order/{orderId}",
              "method": "get",
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "ordeneya-dev-getOrderService",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs12.x",
        "vpc": {},
        "versionLogicalId": "GetOrderServiceLambdaVersionxAUVo5nb2NOEa2p1eL82juXvn8h6NQIDJdoUXlwVRI"
      },
      "prepareOrderService": {
        "handler": "handler.prepareOrder",
        "events": [
          {
            "sqs": {
              "arn": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"IamRoleLambdaExecution\"][\"Properties\"][\"Policies\"][0][\"PolicyDocument\"][\"Statement\"][5][\"Resource\"][0]"
              },
              "batchSize": 1
            }
          }
        ],
        "name": "ordeneya-dev-prepareOrderService",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs12.x",
        "vpc": {},
        "versionLogicalId": "PrepareOrderServiceLambdaVersion9ZPIiupthd4lqO0xJrpysUzweJrIA0JUGqJ2FSIE"
      },
      "sendOrderService": {
        "handler": "handler.sendOrder",
        "events": [
          {
            "stream": {
              "type": "dynamodb",
              "batchSize": 1,
              "startingPosition": "LATEST",
              "arn": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"IamRoleLambdaExecution\"][\"Properties\"][\"Policies\"][0][\"PolicyDocument\"][\"Statement\"][4][\"Resource\"][0]"
              }
            }
          }
        ],
        "name": "ordeneya-dev-sendOrderService",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs12.x",
        "vpc": {},
        "versionLogicalId": "SendOrderServiceLambdaVersionJwPDFNnhferMYn5glBpyFfz3SSJmEux5Z1mB1uea0"
      }
    },
    "resources": {
      "Resources": {
        "PendingOrdersQueue": {
          "Type": "AWS::SQS::Queue",
          "Properties": {
            "QueueName": "PendingOrdersQueue"
          }
        },
        "OrdersTable": {
          "Type": "AWS::DynamoDB::Table",
          "Properties": {
            "AttributeDefinitions": [
              {
                "AttributeName": "id",
                "AttributeType": "S"
              }
            ],
            "KeySchema": [
              {
                "AttributeName": "id",
                "KeyType": "HASH"
              }
            ],
            "ProvisionedThroughput": {
              "ReadCapacityUnits": 1,
              "WriteCapacityUnits": 1
            },
            "TableName": "OrdersTable",
            "StreamSpecification": {
              "StreamViewType": "NEW_IMAGE"
            }
          }
        }
      },
      "Outputs": {}
    },
    "configValidationMode": "warn",
    "serviceFilename": "serverless.yml",
    "layers": {},
    "initialServerlessConfig": {
      "service": {
        "$ref": "$[\"service\"][\"serviceObject\"]"
      },
      "frameworkVersion": "2",
      "provider": {
        "$ref": "$[\"service\"][\"provider\"]"
      },
      "functions": {
        "$ref": "$[\"service\"][\"functions\"]"
      },
      "resources": {
        "$ref": "$[\"service\"][\"resources\"]"
      }
    },
    "isDashboardMonitoringPreconfigured": false,
    "artifact": "C:\\Users\\IncluIT-NB\\Desktop\\serverless-aws\\ordeneYa\\ordeneYa\\.serverless\\ordeneya.zip"
  },
  "package": {
    "artifactDirectoryName": "serverless/ordeneya/dev/1617583547029-2021-04-05T00:45:47.029Z",
    "artifact": "ordeneya.zip"
  }
}